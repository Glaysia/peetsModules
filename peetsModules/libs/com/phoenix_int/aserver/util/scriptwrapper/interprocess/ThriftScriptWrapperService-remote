#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.17.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from com.phoenix_int.aserver.util.scriptwrapper.interprocess import ThriftScriptWrapperService
from com.phoenix_int.aserver.util.scriptwrapper.interprocess.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  ScriptWrapperInitialization init(string epoch)')
    print('  void initSuccess()')
    print('  void initFailed(string error)')
    print('  string GetNewRun()')
    print('  void Success()')
    print('  void Failed(string error)')
    print('  bool boolGetValue(string varName)')
    print('  void boolSetValue(string varName, bool boolVal)')
    print('  string boolToString(string varName)')
    print('  void boolArrayFromString(string varName, string index, string strVal)')
    print('  bool boolArrayGetValue(string varName, string index)')
    print('  string boolArrayGetValueStr(string varName, string index)')
    print('  void boolArraySetValue(string varName, string index, bool boolVal)')
    print('  string boolArrayToString(string varName, string index)')
    print('  void dblFromString(string varName, string strVal)')
    print('  string dblGetEnumAliases(string varName)')
    print('  string dblGetEnumValues(string varName)')
    print('  string dblGetFormat(string varName)')
    print('  bool dblGetHasLowerBound(string varName)')
    print('  bool dblGetHasUpperBound(string varName)')
    print('  double dblGetLowerBound(string varName)')
    print('  double dblGetUpperBound(string varName)')
    print('  double dblGetValue(string varName)')
    print('  void dblSetEnumAliases(string varName, string strVal)')
    print('  void dblSetEnumValues(string varName, string strVal)')
    print('  void dblSetFormat(string varName, string strVal)')
    print('  void dblSetHasLowerBound(string varName, bool boolVal)')
    print('  void dblSetHasUpperBound(string varName, bool boolVal)')
    print('  void dblSetLowerBound(string varName, double dblVal)')
    print('  void dblSetUpperBound(string varName, double dblVal)')
    print('  void dblSetValue(string varName, double dblVal)')
    print('  string dblToString(string varName)')
    print('  void dblArrayFromString(string varName, string index, string strVal)')
    print('  string dblArrayGetEnumAliases(string varName)')
    print('  string dblArrayGetEnumValues(string varName)')
    print('  string dblArrayGetFormat(string varName)')
    print('  bool dblArrayGetHasLowerBound(string varName)')
    print('  bool dblArrayGetHasUpperBound(string varName)')
    print('  double dblArrayGetLowerBound(string varName)')
    print('  double dblArrayGetUpperBound(string varName)')
    print('  double dblArrayGetValue(string varName, string index)')
    print('  void dblArraySetEnumAliases(string varName, string strVal)')
    print('  void dblArraySetEnumValues(string varName, string strVal)')
    print('  void dblArraySetFormat(string varName, string strVal)')
    print('  void dblArraySetHasLowerBound(string varName, bool boolVal)')
    print('  void dblArraySetHasUpperBound(string varName, bool boolVal)')
    print('  void dblArraySetLowerBound(string varName, double dblVal)')
    print('  void dblArraySetUpperBound(string varName, double dblVal)')
    print('  void dblArraySetValue(string varName, string index, double dblVal)')
    print('  string dblArrayToString(string varName, string index)')
    print('  void longFromString(string varName, string strVal)')
    print('  string longGetEnumAliases(string varName)')
    print('  string longGetEnumValues(string varName)')
    print('  string longGetFormat(string varName)')
    print('  bool longGetHasLowerBound(string varName)')
    print('  bool longGetHasUpperBound(string varName)')
    print('  i64 longGetLowerBound(string varName)')
    print('  i64 longGetUpperBound(string varName)')
    print('  i64 longGetValue(string varName)')
    print('  void longSetEnumAliases(string varName, string strVal)')
    print('  void longSetEnumValues(string varName, string strVal)')
    print('  void longSetFormat(string varName, string strVal)')
    print('  void longSetHasLowerBound(string varName, bool boolVal)')
    print('  void longSetHasUpperBound(string varName, bool boolVal)')
    print('  void longSetLowerBound(string varName, i64 value)')
    print('  void longSetUpperBound(string varName, i64 value)')
    print('  void longSetValue(string varName, i64 value)')
    print('  string longToString(string varName)')
    print('  void longArrayFromString(string varName, string index, string strVal)')
    print('  string longArrayGetEnumAliases(string varName)')
    print('  string longArrayGetEnumValues(string varName)')
    print('  string longArrayGetFormat(string varName)')
    print('  bool longArrayGetHasLowerBound(string varName)')
    print('  bool longArrayGetHasUpperBound(string varName)')
    print('  i64 longArrayGetLowerBound(string varName)')
    print('  i64 longArrayGetUpperBound(string varName)')
    print('  i64 longArrayGetValue(string varName, string index)')
    print('  void longArraySetEnumAliases(string varName, string strVal)')
    print('  void longArraySetEnumValues(string varName, string strVal)')
    print('  void longArraySetFormat(string varName, string strVal)')
    print('  void longArraySetHasLowerBound(string varName, bool boolVal)')
    print('  void longArraySetHasUpperBound(string varName, bool boolVal)')
    print('  void longArraySetLowerBound(string varName, i64 value)')
    print('  void longArraySetUpperBound(string varName, i64 value)')
    print('  void longArraySetValue(string varName, string index, i64 value)')
    print('  string longArrayToString(string varName, string index)')
    print('  void fileFromFile(string varName, string fileName)')
    print('  void fileFromString(string varName, string strVal)')
    print('  string fileGetBaseName(string varName)')
    print('  string fileGetContents(string varName)')
    print('  string fileGetFileExtension(string varName)')
    print('  bool fileGetIsBinary(string varName)')
    print('  string fileGetMimeType(string varName)')
    print('  string fileGetName(string varName)')
    print('  string fileGetNameCoded(string varName)')
    print('  bool fileHasChanged(string varName)')
    print('  void fileMarkAsRead(string varName)')
    print('  void fileSetBaseName(string varName, string name)')
    print('  void fileSetContents(string varName, string contents)')
    print('  void fileSetFileExtension(string varName, string extension)')
    print('  void fileSetIsBinary(string varName, bool boolVal)')
    print('  void fileSetMimeType(string varName, string mimeType)')
    print('  void fileSetName(string varName, string strVal)')
    print('  void fileToFile(string varName, string strVal)')
    print('  string fileToString(string varName)')
    print('  void fileArrayFromFile(string varName, string index, string fileName)')
    print('  void fileArrayFromString(string varName, string index, string strVal)')
    print('  string fileArrayGetBaseName(string varName)')
    print('  string fileArrayGetContents(string varName, string index)')
    print('  string fileArrayGetFileExtension(string varName, string index)')
    print('  bool fileArrayGetIsBinary(string varName)')
    print('  string fileArrayGetMimeType(string varName)')
    print('  string fileArrayGetName(string varName, string index)')
    print('  string fileArrayGetNameCoded(string varName, string index)')
    print('  bool fileArrayHasChanged(string varName, string index)')
    print('  void fileArrayMarkAsRead(string varName, string index)')
    print('  void fileArraySetBaseName(string varName, string name)')
    print('  void fileArraySetContents(string varName, string index, string contents)')
    print('  void fileArraySetFileExtension(string varName, string index, string extension)')
    print('  void fileArraySetIsBinary(string varName, bool boolVal)')
    print('  void fileArraySetMimeType(string varName, string mimeType)')
    print('  void fileArraySetName(string varName, string index, string strVal)')
    print('  void fileArrayToFile(string varName, string index, string strVal)')
    print('  string fileArrayToString(string varName, string index)')
    print('  string newPHXRowFieldFile(i32 mode)')
    print('  void rffClearMarks(string key)')
    print('  void rffClose(string key)')
    print('  void rffDelete(string key)')
    print('  void rffGenerate(string key)')
    print('  void rffMarkAsBeginning(string key, string find, i32 occurrence, i32 offset, bool regex)')
    print('  void rffMarkAsEnd(string key, string find, i32 occurrence, i32 offset, bool regex)')
    print('  double rffReadDouble(string key, i32 row, i32 field)')
    print('  i64 rffReadLong(string key, i32 row, i32 field)')
    print('  string rffReadValue(string key, i32 row, i32 field)')
    print('  void rffSetDelimiters(string key, string delimiters)')
    print('  void rffSetFileToGenerateOrParse(string key, string fileName)')
    print('  void rffSetTemplateFile(string key, string fileName)')
    print('  void rffTransferArray(string key, string varName, i32 rowstart, i32 rowend, i32 fieldstart, i32 fieldend, bool resizable, string format, i32 numDimensions)')
    print('  void rffTransferKeyVar(string key, string varName, string searchKey, i32 occurrence, i32 rowOffset, i32 field, string fformat)')
    print('  void rffTransferVar(string key, string varName, i32 row, i32 field, string format)')
    print('  void rffWriteValue(string key, i32 row, i32 field, string val)')
    print('  void runShareCleanTempDir()')
    print('  string runShareGetBaseDirectory()')
    print('  string runShareGetDirectory()')
    print('  void runShareHalt()')
    print('  void runShareLock()')
    print('  void runShareRun(string cmd, bool ignoreErrors, bool autoChangeDir, string shell)')
    print('  void runShareSetAutoDelete(i32 autoDelete)')
    print('  void runShareSetFilesToCopy(string files)')
    print('  void runShareSetMode(i32 mode)')
    print('  void runShareUnlock()')
    print('  void objCallMethod(string varName, string method)')
    print('  void objDeleteAllMembers(string varName)')
    print('  void objDeleteMember(string varName, string mIndex)')
    print('  void objFromFile(string varName, string mIndex, string fileName)')
    print('  void objFromString(string varName, string strVal)')
    print('  void objFromXML(string varName, string strVal)')
    print('  bool objGetBooleanArrayMemberValue(string varName, string mIndex, string index)')
    print('  bool objGetBooleanMemberValue(string varName, string mIndex)')
    print('  string objGetClassURL(string varName)')
    print('  double objGetDoubleArrayMemberValue(string varName, string mIndex, string index)')
    print('  double objGetDoubleMemberValue(string varName, string mIndex)')
    print('  string objGetFileName(string varName, string mIndex)')
    print('  i32 objGetIntArrayMemberValue(string varName, string mIndex, string index)')
    print('  i32 objGetIntMemberValue(string varName, string mIndex)')
    print('  bool objGetIsBinary(string varName, string mIndex)')
    print('  string objGetMemberDescription(string varName, string mIndex)')
    print('  string objGetMemberDimensions(string varName, string mIndex)')
    print('  string objGetMemberEnumAliases(string varName, string mIndex)')
    print('  string objGetMemberEnumValues(string varName, string mIndex)')
    print('  i32 objGetMemberLength(string varName, string mIndex, i32 dim)')
    print('  string objGetMemberLowerBound(string varName, string mIndex)')
    print('  i64 objGetMemberNumDimensions(string varName, string mIndex)')
    print('  string objGetMemberProperty(string varName, string mIndex, string propertyName)')
    print('  string objGetMemberType(string varName, string mIndex)')
    print('  string objGetMemberUnits(string varName, string mIndex)')
    print('  string objGetMemberUpperBound(string varName, string mIndex)')
    print('  string objGetMemberValueAsString(string varName, string mIndex)')
    print('  string objGetStringArrayMemberValue(string varName, string mIndex, string index)')
    print('  string objGetStringMemberValue(string varName, string mIndex)')
    print('  bool objHasMember(string varName, string mIndex)')
    print('  bool objHasMemberLowerBound(string varName, string mIndex)')
    print('  bool objHasMemberUpperBound(string varName, string mIndex)')
    print('  bool objIsNonStrictType(string varName)')
    print('  void objSetBaseName(string varName, string mIndex, string value)')
    print('  void objSetBooleanArrayMemberValue(string varName, string mIndex, string index, bool value)')
    print('  void objSetBooleanMemberValue(string varName, string mIndex, bool boolVal)')
    print('  void objSetDoubleArrayMemberValue(string varName, string mIndex, string index, double value)')
    print('  void objSetDoubleMemberValue(string varName, string mIndex, double value)')
    print('  void objSetFileExtension(string varName, string mIndex, string value)')
    print('  void objSetFileName(string varName, string mIndex, string value)')
    print('  void objSetIntArrayMemberValue(string varName, string mIndex, string index, i32 value)')
    print('  void objSetIntMemberValue(string varName, string mIndex, i32 value)')
    print('  void objSetIsBinary(string varName, string mIndex, bool flag)')
    print('  void objSetMember(string varName, string mIndex, string value, string type)')
    print('  void objSetMemberDescription(string varName, string mIndex, string value)')
    print('  void objSetMemberDimensions(string varName, string mIndex, string strVal)')
    print('  void objSetMemberEnumAliases(string varName, string mIndex, string value)')
    print('  void objSetMemberEnumValues(string varName, string mIndex, string value)')
    print('  void objSetMemberLength(string varName, string mIndex, i32 length, i32 dim)')
    print('  void objSetMemberLowerBound(string varName, string mIndex, string value)')
    print('  void objSetMemberProperty(string varName, string mIndex, string propertyName, string propertyValue)')
    print('  void objSetMemberUnits(string varName, string mIndex, string value)')
    print('  void objSetMemberUpperBound(string varName, string mIndex, string value)')
    print('  void objSetMemberValueFromString(string varName, string mIndex, string value)')
    print('  void objSetStringArrayMemberValue(string varName, string mIndex, string index, string value)')
    print('  void objSetStringMemberValue(string varName, string mIndex, string value)')
    print('  void objToFile(string varName, string mIndex, string fileName)')
    print('  string objToString(string varName)')
    print('  string objToXML(string varName)')
    print('  void wrapperAddMethod(string methodName, string fullName, bool downloadInputs)')
    print('  void wrapperAddVariable(string varName, string varType, bool isInput)')
    print('  string wrapperGetDictKey(i32 index)')
    print('  i64 wrapperGetDictNumEntries()')
    print('  string wrapperGetDictValue(i32 index)')
    print('  string wrapperGetDirectory()')
    print('  string wrapperGetRunDirectory()')
    print('  string wrapperGetVarType(string varName)')
    print('  void wrapperRemoveVariable(string varName)')
    print('  void wrapperSleep(i32 milliSeconds)')
    print('  void arrayFromString(string varName, string strVal)')
    print('  string arrayGetDimensions(string varName)')
    print('  i32 arrayGetLength(string varName, i32 dim)')
    print('  bool arrayGetLockResize(string varName)')
    print('  i64 arrayGetNumDimensions(string varName)')
    print('  void arrayLockDimensions(string varName)')
    print('  void arraySetDimensions(string varName, string strVal)')
    print('  void arraySetLength(string varName, i32 length, i32 dim)')
    print('  void arraySetLockResize(string varName, bool boolVal)')
    print('  string arrayToString(string varName)')
    print('  string simpleGetDescription(string varName)')
    print('  bool simpleGetHasChanged(string varName)')
    print('  string simpleGetUnits(string varName)')
    print('  void simpleSetDescription(string varName, string strVal)')
    print('  void simpleSetHasChanged(string varName, bool boolVal)')
    print('  void simpleSetUnits(string varName, string strVal)')
    print('  string strGetEnumAliases(string varName)')
    print('  string strGetEnumValues(string varName)')
    print('  string strGetValue(string varName)')
    print('  void strSetEnumAliases(string varName, string strVal)')
    print('  void strSetEnumValues(string varName, string strVal)')
    print('  void strSetValue(string varName, string strVal)')
    print('  void strArrayFromString(string varName, string index, string value)')
    print('  string strArrayGetEnumAliases(string varName)')
    print('  string strArrayGetEnumValues(string varName)')
    print('  string strArrayGetValue(string varName, string index)')
    print('  void strArraySetEnumAliases(string varName, string strVal)')
    print('  void strArraySetEnumValues(string varName, string strVal)')
    print('  void strArraySetValue(string varName, string index, string strVal)')
    print('  string strArrayToString(string varName, string index)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = ThriftScriptWrapperService.Client(protocol)
transport.open()

if cmd == 'init':
    if len(args) != 1:
        print('init requires 1 args')
        sys.exit(1)
    pp.pprint(client.init(args[0],))

elif cmd == 'initSuccess':
    if len(args) != 0:
        print('initSuccess requires 0 args')
        sys.exit(1)
    pp.pprint(client.initSuccess())

elif cmd == 'initFailed':
    if len(args) != 1:
        print('initFailed requires 1 args')
        sys.exit(1)
    pp.pprint(client.initFailed(args[0],))

elif cmd == 'GetNewRun':
    if len(args) != 0:
        print('GetNewRun requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetNewRun())

elif cmd == 'Success':
    if len(args) != 0:
        print('Success requires 0 args')
        sys.exit(1)
    pp.pprint(client.Success())

elif cmd == 'Failed':
    if len(args) != 1:
        print('Failed requires 1 args')
        sys.exit(1)
    pp.pprint(client.Failed(args[0],))

elif cmd == 'boolGetValue':
    if len(args) != 1:
        print('boolGetValue requires 1 args')
        sys.exit(1)
    pp.pprint(client.boolGetValue(args[0],))

elif cmd == 'boolSetValue':
    if len(args) != 2:
        print('boolSetValue requires 2 args')
        sys.exit(1)
    pp.pprint(client.boolSetValue(args[0], eval(args[1]),))

elif cmd == 'boolToString':
    if len(args) != 1:
        print('boolToString requires 1 args')
        sys.exit(1)
    pp.pprint(client.boolToString(args[0],))

elif cmd == 'boolArrayFromString':
    if len(args) != 3:
        print('boolArrayFromString requires 3 args')
        sys.exit(1)
    pp.pprint(client.boolArrayFromString(args[0], args[1], args[2],))

elif cmd == 'boolArrayGetValue':
    if len(args) != 2:
        print('boolArrayGetValue requires 2 args')
        sys.exit(1)
    pp.pprint(client.boolArrayGetValue(args[0], args[1],))

elif cmd == 'boolArrayGetValueStr':
    if len(args) != 2:
        print('boolArrayGetValueStr requires 2 args')
        sys.exit(1)
    pp.pprint(client.boolArrayGetValueStr(args[0], args[1],))

elif cmd == 'boolArraySetValue':
    if len(args) != 3:
        print('boolArraySetValue requires 3 args')
        sys.exit(1)
    pp.pprint(client.boolArraySetValue(args[0], args[1], eval(args[2]),))

elif cmd == 'boolArrayToString':
    if len(args) != 2:
        print('boolArrayToString requires 2 args')
        sys.exit(1)
    pp.pprint(client.boolArrayToString(args[0], args[1],))

elif cmd == 'dblFromString':
    if len(args) != 2:
        print('dblFromString requires 2 args')
        sys.exit(1)
    pp.pprint(client.dblFromString(args[0], args[1],))

elif cmd == 'dblGetEnumAliases':
    if len(args) != 1:
        print('dblGetEnumAliases requires 1 args')
        sys.exit(1)
    pp.pprint(client.dblGetEnumAliases(args[0],))

elif cmd == 'dblGetEnumValues':
    if len(args) != 1:
        print('dblGetEnumValues requires 1 args')
        sys.exit(1)
    pp.pprint(client.dblGetEnumValues(args[0],))

elif cmd == 'dblGetFormat':
    if len(args) != 1:
        print('dblGetFormat requires 1 args')
        sys.exit(1)
    pp.pprint(client.dblGetFormat(args[0],))

elif cmd == 'dblGetHasLowerBound':
    if len(args) != 1:
        print('dblGetHasLowerBound requires 1 args')
        sys.exit(1)
    pp.pprint(client.dblGetHasLowerBound(args[0],))

elif cmd == 'dblGetHasUpperBound':
    if len(args) != 1:
        print('dblGetHasUpperBound requires 1 args')
        sys.exit(1)
    pp.pprint(client.dblGetHasUpperBound(args[0],))

elif cmd == 'dblGetLowerBound':
    if len(args) != 1:
        print('dblGetLowerBound requires 1 args')
        sys.exit(1)
    pp.pprint(client.dblGetLowerBound(args[0],))

elif cmd == 'dblGetUpperBound':
    if len(args) != 1:
        print('dblGetUpperBound requires 1 args')
        sys.exit(1)
    pp.pprint(client.dblGetUpperBound(args[0],))

elif cmd == 'dblGetValue':
    if len(args) != 1:
        print('dblGetValue requires 1 args')
        sys.exit(1)
    pp.pprint(client.dblGetValue(args[0],))

elif cmd == 'dblSetEnumAliases':
    if len(args) != 2:
        print('dblSetEnumAliases requires 2 args')
        sys.exit(1)
    pp.pprint(client.dblSetEnumAliases(args[0], args[1],))

elif cmd == 'dblSetEnumValues':
    if len(args) != 2:
        print('dblSetEnumValues requires 2 args')
        sys.exit(1)
    pp.pprint(client.dblSetEnumValues(args[0], args[1],))

elif cmd == 'dblSetFormat':
    if len(args) != 2:
        print('dblSetFormat requires 2 args')
        sys.exit(1)
    pp.pprint(client.dblSetFormat(args[0], args[1],))

elif cmd == 'dblSetHasLowerBound':
    if len(args) != 2:
        print('dblSetHasLowerBound requires 2 args')
        sys.exit(1)
    pp.pprint(client.dblSetHasLowerBound(args[0], eval(args[1]),))

elif cmd == 'dblSetHasUpperBound':
    if len(args) != 2:
        print('dblSetHasUpperBound requires 2 args')
        sys.exit(1)
    pp.pprint(client.dblSetHasUpperBound(args[0], eval(args[1]),))

elif cmd == 'dblSetLowerBound':
    if len(args) != 2:
        print('dblSetLowerBound requires 2 args')
        sys.exit(1)
    pp.pprint(client.dblSetLowerBound(args[0], eval(args[1]),))

elif cmd == 'dblSetUpperBound':
    if len(args) != 2:
        print('dblSetUpperBound requires 2 args')
        sys.exit(1)
    pp.pprint(client.dblSetUpperBound(args[0], eval(args[1]),))

elif cmd == 'dblSetValue':
    if len(args) != 2:
        print('dblSetValue requires 2 args')
        sys.exit(1)
    pp.pprint(client.dblSetValue(args[0], eval(args[1]),))

elif cmd == 'dblToString':
    if len(args) != 1:
        print('dblToString requires 1 args')
        sys.exit(1)
    pp.pprint(client.dblToString(args[0],))

elif cmd == 'dblArrayFromString':
    if len(args) != 3:
        print('dblArrayFromString requires 3 args')
        sys.exit(1)
    pp.pprint(client.dblArrayFromString(args[0], args[1], args[2],))

elif cmd == 'dblArrayGetEnumAliases':
    if len(args) != 1:
        print('dblArrayGetEnumAliases requires 1 args')
        sys.exit(1)
    pp.pprint(client.dblArrayGetEnumAliases(args[0],))

elif cmd == 'dblArrayGetEnumValues':
    if len(args) != 1:
        print('dblArrayGetEnumValues requires 1 args')
        sys.exit(1)
    pp.pprint(client.dblArrayGetEnumValues(args[0],))

elif cmd == 'dblArrayGetFormat':
    if len(args) != 1:
        print('dblArrayGetFormat requires 1 args')
        sys.exit(1)
    pp.pprint(client.dblArrayGetFormat(args[0],))

elif cmd == 'dblArrayGetHasLowerBound':
    if len(args) != 1:
        print('dblArrayGetHasLowerBound requires 1 args')
        sys.exit(1)
    pp.pprint(client.dblArrayGetHasLowerBound(args[0],))

elif cmd == 'dblArrayGetHasUpperBound':
    if len(args) != 1:
        print('dblArrayGetHasUpperBound requires 1 args')
        sys.exit(1)
    pp.pprint(client.dblArrayGetHasUpperBound(args[0],))

elif cmd == 'dblArrayGetLowerBound':
    if len(args) != 1:
        print('dblArrayGetLowerBound requires 1 args')
        sys.exit(1)
    pp.pprint(client.dblArrayGetLowerBound(args[0],))

elif cmd == 'dblArrayGetUpperBound':
    if len(args) != 1:
        print('dblArrayGetUpperBound requires 1 args')
        sys.exit(1)
    pp.pprint(client.dblArrayGetUpperBound(args[0],))

elif cmd == 'dblArrayGetValue':
    if len(args) != 2:
        print('dblArrayGetValue requires 2 args')
        sys.exit(1)
    pp.pprint(client.dblArrayGetValue(args[0], args[1],))

elif cmd == 'dblArraySetEnumAliases':
    if len(args) != 2:
        print('dblArraySetEnumAliases requires 2 args')
        sys.exit(1)
    pp.pprint(client.dblArraySetEnumAliases(args[0], args[1],))

elif cmd == 'dblArraySetEnumValues':
    if len(args) != 2:
        print('dblArraySetEnumValues requires 2 args')
        sys.exit(1)
    pp.pprint(client.dblArraySetEnumValues(args[0], args[1],))

elif cmd == 'dblArraySetFormat':
    if len(args) != 2:
        print('dblArraySetFormat requires 2 args')
        sys.exit(1)
    pp.pprint(client.dblArraySetFormat(args[0], args[1],))

elif cmd == 'dblArraySetHasLowerBound':
    if len(args) != 2:
        print('dblArraySetHasLowerBound requires 2 args')
        sys.exit(1)
    pp.pprint(client.dblArraySetHasLowerBound(args[0], eval(args[1]),))

elif cmd == 'dblArraySetHasUpperBound':
    if len(args) != 2:
        print('dblArraySetHasUpperBound requires 2 args')
        sys.exit(1)
    pp.pprint(client.dblArraySetHasUpperBound(args[0], eval(args[1]),))

elif cmd == 'dblArraySetLowerBound':
    if len(args) != 2:
        print('dblArraySetLowerBound requires 2 args')
        sys.exit(1)
    pp.pprint(client.dblArraySetLowerBound(args[0], eval(args[1]),))

elif cmd == 'dblArraySetUpperBound':
    if len(args) != 2:
        print('dblArraySetUpperBound requires 2 args')
        sys.exit(1)
    pp.pprint(client.dblArraySetUpperBound(args[0], eval(args[1]),))

elif cmd == 'dblArraySetValue':
    if len(args) != 3:
        print('dblArraySetValue requires 3 args')
        sys.exit(1)
    pp.pprint(client.dblArraySetValue(args[0], args[1], eval(args[2]),))

elif cmd == 'dblArrayToString':
    if len(args) != 2:
        print('dblArrayToString requires 2 args')
        sys.exit(1)
    pp.pprint(client.dblArrayToString(args[0], args[1],))

elif cmd == 'longFromString':
    if len(args) != 2:
        print('longFromString requires 2 args')
        sys.exit(1)
    pp.pprint(client.longFromString(args[0], args[1],))

elif cmd == 'longGetEnumAliases':
    if len(args) != 1:
        print('longGetEnumAliases requires 1 args')
        sys.exit(1)
    pp.pprint(client.longGetEnumAliases(args[0],))

elif cmd == 'longGetEnumValues':
    if len(args) != 1:
        print('longGetEnumValues requires 1 args')
        sys.exit(1)
    pp.pprint(client.longGetEnumValues(args[0],))

elif cmd == 'longGetFormat':
    if len(args) != 1:
        print('longGetFormat requires 1 args')
        sys.exit(1)
    pp.pprint(client.longGetFormat(args[0],))

elif cmd == 'longGetHasLowerBound':
    if len(args) != 1:
        print('longGetHasLowerBound requires 1 args')
        sys.exit(1)
    pp.pprint(client.longGetHasLowerBound(args[0],))

elif cmd == 'longGetHasUpperBound':
    if len(args) != 1:
        print('longGetHasUpperBound requires 1 args')
        sys.exit(1)
    pp.pprint(client.longGetHasUpperBound(args[0],))

elif cmd == 'longGetLowerBound':
    if len(args) != 1:
        print('longGetLowerBound requires 1 args')
        sys.exit(1)
    pp.pprint(client.longGetLowerBound(args[0],))

elif cmd == 'longGetUpperBound':
    if len(args) != 1:
        print('longGetUpperBound requires 1 args')
        sys.exit(1)
    pp.pprint(client.longGetUpperBound(args[0],))

elif cmd == 'longGetValue':
    if len(args) != 1:
        print('longGetValue requires 1 args')
        sys.exit(1)
    pp.pprint(client.longGetValue(args[0],))

elif cmd == 'longSetEnumAliases':
    if len(args) != 2:
        print('longSetEnumAliases requires 2 args')
        sys.exit(1)
    pp.pprint(client.longSetEnumAliases(args[0], args[1],))

elif cmd == 'longSetEnumValues':
    if len(args) != 2:
        print('longSetEnumValues requires 2 args')
        sys.exit(1)
    pp.pprint(client.longSetEnumValues(args[0], args[1],))

elif cmd == 'longSetFormat':
    if len(args) != 2:
        print('longSetFormat requires 2 args')
        sys.exit(1)
    pp.pprint(client.longSetFormat(args[0], args[1],))

elif cmd == 'longSetHasLowerBound':
    if len(args) != 2:
        print('longSetHasLowerBound requires 2 args')
        sys.exit(1)
    pp.pprint(client.longSetHasLowerBound(args[0], eval(args[1]),))

elif cmd == 'longSetHasUpperBound':
    if len(args) != 2:
        print('longSetHasUpperBound requires 2 args')
        sys.exit(1)
    pp.pprint(client.longSetHasUpperBound(args[0], eval(args[1]),))

elif cmd == 'longSetLowerBound':
    if len(args) != 2:
        print('longSetLowerBound requires 2 args')
        sys.exit(1)
    pp.pprint(client.longSetLowerBound(args[0], eval(args[1]),))

elif cmd == 'longSetUpperBound':
    if len(args) != 2:
        print('longSetUpperBound requires 2 args')
        sys.exit(1)
    pp.pprint(client.longSetUpperBound(args[0], eval(args[1]),))

elif cmd == 'longSetValue':
    if len(args) != 2:
        print('longSetValue requires 2 args')
        sys.exit(1)
    pp.pprint(client.longSetValue(args[0], eval(args[1]),))

elif cmd == 'longToString':
    if len(args) != 1:
        print('longToString requires 1 args')
        sys.exit(1)
    pp.pprint(client.longToString(args[0],))

elif cmd == 'longArrayFromString':
    if len(args) != 3:
        print('longArrayFromString requires 3 args')
        sys.exit(1)
    pp.pprint(client.longArrayFromString(args[0], args[1], args[2],))

elif cmd == 'longArrayGetEnumAliases':
    if len(args) != 1:
        print('longArrayGetEnumAliases requires 1 args')
        sys.exit(1)
    pp.pprint(client.longArrayGetEnumAliases(args[0],))

elif cmd == 'longArrayGetEnumValues':
    if len(args) != 1:
        print('longArrayGetEnumValues requires 1 args')
        sys.exit(1)
    pp.pprint(client.longArrayGetEnumValues(args[0],))

elif cmd == 'longArrayGetFormat':
    if len(args) != 1:
        print('longArrayGetFormat requires 1 args')
        sys.exit(1)
    pp.pprint(client.longArrayGetFormat(args[0],))

elif cmd == 'longArrayGetHasLowerBound':
    if len(args) != 1:
        print('longArrayGetHasLowerBound requires 1 args')
        sys.exit(1)
    pp.pprint(client.longArrayGetHasLowerBound(args[0],))

elif cmd == 'longArrayGetHasUpperBound':
    if len(args) != 1:
        print('longArrayGetHasUpperBound requires 1 args')
        sys.exit(1)
    pp.pprint(client.longArrayGetHasUpperBound(args[0],))

elif cmd == 'longArrayGetLowerBound':
    if len(args) != 1:
        print('longArrayGetLowerBound requires 1 args')
        sys.exit(1)
    pp.pprint(client.longArrayGetLowerBound(args[0],))

elif cmd == 'longArrayGetUpperBound':
    if len(args) != 1:
        print('longArrayGetUpperBound requires 1 args')
        sys.exit(1)
    pp.pprint(client.longArrayGetUpperBound(args[0],))

elif cmd == 'longArrayGetValue':
    if len(args) != 2:
        print('longArrayGetValue requires 2 args')
        sys.exit(1)
    pp.pprint(client.longArrayGetValue(args[0], args[1],))

elif cmd == 'longArraySetEnumAliases':
    if len(args) != 2:
        print('longArraySetEnumAliases requires 2 args')
        sys.exit(1)
    pp.pprint(client.longArraySetEnumAliases(args[0], args[1],))

elif cmd == 'longArraySetEnumValues':
    if len(args) != 2:
        print('longArraySetEnumValues requires 2 args')
        sys.exit(1)
    pp.pprint(client.longArraySetEnumValues(args[0], args[1],))

elif cmd == 'longArraySetFormat':
    if len(args) != 2:
        print('longArraySetFormat requires 2 args')
        sys.exit(1)
    pp.pprint(client.longArraySetFormat(args[0], args[1],))

elif cmd == 'longArraySetHasLowerBound':
    if len(args) != 2:
        print('longArraySetHasLowerBound requires 2 args')
        sys.exit(1)
    pp.pprint(client.longArraySetHasLowerBound(args[0], eval(args[1]),))

elif cmd == 'longArraySetHasUpperBound':
    if len(args) != 2:
        print('longArraySetHasUpperBound requires 2 args')
        sys.exit(1)
    pp.pprint(client.longArraySetHasUpperBound(args[0], eval(args[1]),))

elif cmd == 'longArraySetLowerBound':
    if len(args) != 2:
        print('longArraySetLowerBound requires 2 args')
        sys.exit(1)
    pp.pprint(client.longArraySetLowerBound(args[0], eval(args[1]),))

elif cmd == 'longArraySetUpperBound':
    if len(args) != 2:
        print('longArraySetUpperBound requires 2 args')
        sys.exit(1)
    pp.pprint(client.longArraySetUpperBound(args[0], eval(args[1]),))

elif cmd == 'longArraySetValue':
    if len(args) != 3:
        print('longArraySetValue requires 3 args')
        sys.exit(1)
    pp.pprint(client.longArraySetValue(args[0], args[1], eval(args[2]),))

elif cmd == 'longArrayToString':
    if len(args) != 2:
        print('longArrayToString requires 2 args')
        sys.exit(1)
    pp.pprint(client.longArrayToString(args[0], args[1],))

elif cmd == 'fileFromFile':
    if len(args) != 2:
        print('fileFromFile requires 2 args')
        sys.exit(1)
    pp.pprint(client.fileFromFile(args[0], args[1],))

elif cmd == 'fileFromString':
    if len(args) != 2:
        print('fileFromString requires 2 args')
        sys.exit(1)
    pp.pprint(client.fileFromString(args[0], args[1],))

elif cmd == 'fileGetBaseName':
    if len(args) != 1:
        print('fileGetBaseName requires 1 args')
        sys.exit(1)
    pp.pprint(client.fileGetBaseName(args[0],))

elif cmd == 'fileGetContents':
    if len(args) != 1:
        print('fileGetContents requires 1 args')
        sys.exit(1)
    pp.pprint(client.fileGetContents(args[0],))

elif cmd == 'fileGetFileExtension':
    if len(args) != 1:
        print('fileGetFileExtension requires 1 args')
        sys.exit(1)
    pp.pprint(client.fileGetFileExtension(args[0],))

elif cmd == 'fileGetIsBinary':
    if len(args) != 1:
        print('fileGetIsBinary requires 1 args')
        sys.exit(1)
    pp.pprint(client.fileGetIsBinary(args[0],))

elif cmd == 'fileGetMimeType':
    if len(args) != 1:
        print('fileGetMimeType requires 1 args')
        sys.exit(1)
    pp.pprint(client.fileGetMimeType(args[0],))

elif cmd == 'fileGetName':
    if len(args) != 1:
        print('fileGetName requires 1 args')
        sys.exit(1)
    pp.pprint(client.fileGetName(args[0],))

elif cmd == 'fileGetNameCoded':
    if len(args) != 1:
        print('fileGetNameCoded requires 1 args')
        sys.exit(1)
    pp.pprint(client.fileGetNameCoded(args[0],))

elif cmd == 'fileHasChanged':
    if len(args) != 1:
        print('fileHasChanged requires 1 args')
        sys.exit(1)
    pp.pprint(client.fileHasChanged(args[0],))

elif cmd == 'fileMarkAsRead':
    if len(args) != 1:
        print('fileMarkAsRead requires 1 args')
        sys.exit(1)
    pp.pprint(client.fileMarkAsRead(args[0],))

elif cmd == 'fileSetBaseName':
    if len(args) != 2:
        print('fileSetBaseName requires 2 args')
        sys.exit(1)
    pp.pprint(client.fileSetBaseName(args[0], args[1],))

elif cmd == 'fileSetContents':
    if len(args) != 2:
        print('fileSetContents requires 2 args')
        sys.exit(1)
    pp.pprint(client.fileSetContents(args[0], args[1],))

elif cmd == 'fileSetFileExtension':
    if len(args) != 2:
        print('fileSetFileExtension requires 2 args')
        sys.exit(1)
    pp.pprint(client.fileSetFileExtension(args[0], args[1],))

elif cmd == 'fileSetIsBinary':
    if len(args) != 2:
        print('fileSetIsBinary requires 2 args')
        sys.exit(1)
    pp.pprint(client.fileSetIsBinary(args[0], eval(args[1]),))

elif cmd == 'fileSetMimeType':
    if len(args) != 2:
        print('fileSetMimeType requires 2 args')
        sys.exit(1)
    pp.pprint(client.fileSetMimeType(args[0], args[1],))

elif cmd == 'fileSetName':
    if len(args) != 2:
        print('fileSetName requires 2 args')
        sys.exit(1)
    pp.pprint(client.fileSetName(args[0], args[1],))

elif cmd == 'fileToFile':
    if len(args) != 2:
        print('fileToFile requires 2 args')
        sys.exit(1)
    pp.pprint(client.fileToFile(args[0], args[1],))

elif cmd == 'fileToString':
    if len(args) != 1:
        print('fileToString requires 1 args')
        sys.exit(1)
    pp.pprint(client.fileToString(args[0],))

elif cmd == 'fileArrayFromFile':
    if len(args) != 3:
        print('fileArrayFromFile requires 3 args')
        sys.exit(1)
    pp.pprint(client.fileArrayFromFile(args[0], args[1], args[2],))

elif cmd == 'fileArrayFromString':
    if len(args) != 3:
        print('fileArrayFromString requires 3 args')
        sys.exit(1)
    pp.pprint(client.fileArrayFromString(args[0], args[1], args[2],))

elif cmd == 'fileArrayGetBaseName':
    if len(args) != 1:
        print('fileArrayGetBaseName requires 1 args')
        sys.exit(1)
    pp.pprint(client.fileArrayGetBaseName(args[0],))

elif cmd == 'fileArrayGetContents':
    if len(args) != 2:
        print('fileArrayGetContents requires 2 args')
        sys.exit(1)
    pp.pprint(client.fileArrayGetContents(args[0], args[1],))

elif cmd == 'fileArrayGetFileExtension':
    if len(args) != 2:
        print('fileArrayGetFileExtension requires 2 args')
        sys.exit(1)
    pp.pprint(client.fileArrayGetFileExtension(args[0], args[1],))

elif cmd == 'fileArrayGetIsBinary':
    if len(args) != 1:
        print('fileArrayGetIsBinary requires 1 args')
        sys.exit(1)
    pp.pprint(client.fileArrayGetIsBinary(args[0],))

elif cmd == 'fileArrayGetMimeType':
    if len(args) != 1:
        print('fileArrayGetMimeType requires 1 args')
        sys.exit(1)
    pp.pprint(client.fileArrayGetMimeType(args[0],))

elif cmd == 'fileArrayGetName':
    if len(args) != 2:
        print('fileArrayGetName requires 2 args')
        sys.exit(1)
    pp.pprint(client.fileArrayGetName(args[0], args[1],))

elif cmd == 'fileArrayGetNameCoded':
    if len(args) != 2:
        print('fileArrayGetNameCoded requires 2 args')
        sys.exit(1)
    pp.pprint(client.fileArrayGetNameCoded(args[0], args[1],))

elif cmd == 'fileArrayHasChanged':
    if len(args) != 2:
        print('fileArrayHasChanged requires 2 args')
        sys.exit(1)
    pp.pprint(client.fileArrayHasChanged(args[0], args[1],))

elif cmd == 'fileArrayMarkAsRead':
    if len(args) != 2:
        print('fileArrayMarkAsRead requires 2 args')
        sys.exit(1)
    pp.pprint(client.fileArrayMarkAsRead(args[0], args[1],))

elif cmd == 'fileArraySetBaseName':
    if len(args) != 2:
        print('fileArraySetBaseName requires 2 args')
        sys.exit(1)
    pp.pprint(client.fileArraySetBaseName(args[0], args[1],))

elif cmd == 'fileArraySetContents':
    if len(args) != 3:
        print('fileArraySetContents requires 3 args')
        sys.exit(1)
    pp.pprint(client.fileArraySetContents(args[0], args[1], args[2],))

elif cmd == 'fileArraySetFileExtension':
    if len(args) != 3:
        print('fileArraySetFileExtension requires 3 args')
        sys.exit(1)
    pp.pprint(client.fileArraySetFileExtension(args[0], args[1], args[2],))

elif cmd == 'fileArraySetIsBinary':
    if len(args) != 2:
        print('fileArraySetIsBinary requires 2 args')
        sys.exit(1)
    pp.pprint(client.fileArraySetIsBinary(args[0], eval(args[1]),))

elif cmd == 'fileArraySetMimeType':
    if len(args) != 2:
        print('fileArraySetMimeType requires 2 args')
        sys.exit(1)
    pp.pprint(client.fileArraySetMimeType(args[0], args[1],))

elif cmd == 'fileArraySetName':
    if len(args) != 3:
        print('fileArraySetName requires 3 args')
        sys.exit(1)
    pp.pprint(client.fileArraySetName(args[0], args[1], args[2],))

elif cmd == 'fileArrayToFile':
    if len(args) != 3:
        print('fileArrayToFile requires 3 args')
        sys.exit(1)
    pp.pprint(client.fileArrayToFile(args[0], args[1], args[2],))

elif cmd == 'fileArrayToString':
    if len(args) != 2:
        print('fileArrayToString requires 2 args')
        sys.exit(1)
    pp.pprint(client.fileArrayToString(args[0], args[1],))

elif cmd == 'newPHXRowFieldFile':
    if len(args) != 1:
        print('newPHXRowFieldFile requires 1 args')
        sys.exit(1)
    pp.pprint(client.newPHXRowFieldFile(eval(args[0]),))

elif cmd == 'rffClearMarks':
    if len(args) != 1:
        print('rffClearMarks requires 1 args')
        sys.exit(1)
    pp.pprint(client.rffClearMarks(args[0],))

elif cmd == 'rffClose':
    if len(args) != 1:
        print('rffClose requires 1 args')
        sys.exit(1)
    pp.pprint(client.rffClose(args[0],))

elif cmd == 'rffDelete':
    if len(args) != 1:
        print('rffDelete requires 1 args')
        sys.exit(1)
    pp.pprint(client.rffDelete(args[0],))

elif cmd == 'rffGenerate':
    if len(args) != 1:
        print('rffGenerate requires 1 args')
        sys.exit(1)
    pp.pprint(client.rffGenerate(args[0],))

elif cmd == 'rffMarkAsBeginning':
    if len(args) != 5:
        print('rffMarkAsBeginning requires 5 args')
        sys.exit(1)
    pp.pprint(client.rffMarkAsBeginning(args[0], args[1], eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'rffMarkAsEnd':
    if len(args) != 5:
        print('rffMarkAsEnd requires 5 args')
        sys.exit(1)
    pp.pprint(client.rffMarkAsEnd(args[0], args[1], eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'rffReadDouble':
    if len(args) != 3:
        print('rffReadDouble requires 3 args')
        sys.exit(1)
    pp.pprint(client.rffReadDouble(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'rffReadLong':
    if len(args) != 3:
        print('rffReadLong requires 3 args')
        sys.exit(1)
    pp.pprint(client.rffReadLong(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'rffReadValue':
    if len(args) != 3:
        print('rffReadValue requires 3 args')
        sys.exit(1)
    pp.pprint(client.rffReadValue(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'rffSetDelimiters':
    if len(args) != 2:
        print('rffSetDelimiters requires 2 args')
        sys.exit(1)
    pp.pprint(client.rffSetDelimiters(args[0], args[1],))

elif cmd == 'rffSetFileToGenerateOrParse':
    if len(args) != 2:
        print('rffSetFileToGenerateOrParse requires 2 args')
        sys.exit(1)
    pp.pprint(client.rffSetFileToGenerateOrParse(args[0], args[1],))

elif cmd == 'rffSetTemplateFile':
    if len(args) != 2:
        print('rffSetTemplateFile requires 2 args')
        sys.exit(1)
    pp.pprint(client.rffSetTemplateFile(args[0], args[1],))

elif cmd == 'rffTransferArray':
    if len(args) != 9:
        print('rffTransferArray requires 9 args')
        sys.exit(1)
    pp.pprint(client.rffTransferArray(args[0], args[1], eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]), args[7], eval(args[8]),))

elif cmd == 'rffTransferKeyVar':
    if len(args) != 7:
        print('rffTransferKeyVar requires 7 args')
        sys.exit(1)
    pp.pprint(client.rffTransferKeyVar(args[0], args[1], args[2], eval(args[3]), eval(args[4]), eval(args[5]), args[6],))

elif cmd == 'rffTransferVar':
    if len(args) != 5:
        print('rffTransferVar requires 5 args')
        sys.exit(1)
    pp.pprint(client.rffTransferVar(args[0], args[1], eval(args[2]), eval(args[3]), args[4],))

elif cmd == 'rffWriteValue':
    if len(args) != 4:
        print('rffWriteValue requires 4 args')
        sys.exit(1)
    pp.pprint(client.rffWriteValue(args[0], eval(args[1]), eval(args[2]), args[3],))

elif cmd == 'runShareCleanTempDir':
    if len(args) != 0:
        print('runShareCleanTempDir requires 0 args')
        sys.exit(1)
    pp.pprint(client.runShareCleanTempDir())

elif cmd == 'runShareGetBaseDirectory':
    if len(args) != 0:
        print('runShareGetBaseDirectory requires 0 args')
        sys.exit(1)
    pp.pprint(client.runShareGetBaseDirectory())

elif cmd == 'runShareGetDirectory':
    if len(args) != 0:
        print('runShareGetDirectory requires 0 args')
        sys.exit(1)
    pp.pprint(client.runShareGetDirectory())

elif cmd == 'runShareHalt':
    if len(args) != 0:
        print('runShareHalt requires 0 args')
        sys.exit(1)
    pp.pprint(client.runShareHalt())

elif cmd == 'runShareLock':
    if len(args) != 0:
        print('runShareLock requires 0 args')
        sys.exit(1)
    pp.pprint(client.runShareLock())

elif cmd == 'runShareRun':
    if len(args) != 4:
        print('runShareRun requires 4 args')
        sys.exit(1)
    pp.pprint(client.runShareRun(args[0], eval(args[1]), eval(args[2]), args[3],))

elif cmd == 'runShareSetAutoDelete':
    if len(args) != 1:
        print('runShareSetAutoDelete requires 1 args')
        sys.exit(1)
    pp.pprint(client.runShareSetAutoDelete(eval(args[0]),))

elif cmd == 'runShareSetFilesToCopy':
    if len(args) != 1:
        print('runShareSetFilesToCopy requires 1 args')
        sys.exit(1)
    pp.pprint(client.runShareSetFilesToCopy(args[0],))

elif cmd == 'runShareSetMode':
    if len(args) != 1:
        print('runShareSetMode requires 1 args')
        sys.exit(1)
    pp.pprint(client.runShareSetMode(eval(args[0]),))

elif cmd == 'runShareUnlock':
    if len(args) != 0:
        print('runShareUnlock requires 0 args')
        sys.exit(1)
    pp.pprint(client.runShareUnlock())

elif cmd == 'objCallMethod':
    if len(args) != 2:
        print('objCallMethod requires 2 args')
        sys.exit(1)
    pp.pprint(client.objCallMethod(args[0], args[1],))

elif cmd == 'objDeleteAllMembers':
    if len(args) != 1:
        print('objDeleteAllMembers requires 1 args')
        sys.exit(1)
    pp.pprint(client.objDeleteAllMembers(args[0],))

elif cmd == 'objDeleteMember':
    if len(args) != 2:
        print('objDeleteMember requires 2 args')
        sys.exit(1)
    pp.pprint(client.objDeleteMember(args[0], args[1],))

elif cmd == 'objFromFile':
    if len(args) != 3:
        print('objFromFile requires 3 args')
        sys.exit(1)
    pp.pprint(client.objFromFile(args[0], args[1], args[2],))

elif cmd == 'objFromString':
    if len(args) != 2:
        print('objFromString requires 2 args')
        sys.exit(1)
    pp.pprint(client.objFromString(args[0], args[1],))

elif cmd == 'objFromXML':
    if len(args) != 2:
        print('objFromXML requires 2 args')
        sys.exit(1)
    pp.pprint(client.objFromXML(args[0], args[1],))

elif cmd == 'objGetBooleanArrayMemberValue':
    if len(args) != 3:
        print('objGetBooleanArrayMemberValue requires 3 args')
        sys.exit(1)
    pp.pprint(client.objGetBooleanArrayMemberValue(args[0], args[1], args[2],))

elif cmd == 'objGetBooleanMemberValue':
    if len(args) != 2:
        print('objGetBooleanMemberValue requires 2 args')
        sys.exit(1)
    pp.pprint(client.objGetBooleanMemberValue(args[0], args[1],))

elif cmd == 'objGetClassURL':
    if len(args) != 1:
        print('objGetClassURL requires 1 args')
        sys.exit(1)
    pp.pprint(client.objGetClassURL(args[0],))

elif cmd == 'objGetDoubleArrayMemberValue':
    if len(args) != 3:
        print('objGetDoubleArrayMemberValue requires 3 args')
        sys.exit(1)
    pp.pprint(client.objGetDoubleArrayMemberValue(args[0], args[1], args[2],))

elif cmd == 'objGetDoubleMemberValue':
    if len(args) != 2:
        print('objGetDoubleMemberValue requires 2 args')
        sys.exit(1)
    pp.pprint(client.objGetDoubleMemberValue(args[0], args[1],))

elif cmd == 'objGetFileName':
    if len(args) != 2:
        print('objGetFileName requires 2 args')
        sys.exit(1)
    pp.pprint(client.objGetFileName(args[0], args[1],))

elif cmd == 'objGetIntArrayMemberValue':
    if len(args) != 3:
        print('objGetIntArrayMemberValue requires 3 args')
        sys.exit(1)
    pp.pprint(client.objGetIntArrayMemberValue(args[0], args[1], args[2],))

elif cmd == 'objGetIntMemberValue':
    if len(args) != 2:
        print('objGetIntMemberValue requires 2 args')
        sys.exit(1)
    pp.pprint(client.objGetIntMemberValue(args[0], args[1],))

elif cmd == 'objGetIsBinary':
    if len(args) != 2:
        print('objGetIsBinary requires 2 args')
        sys.exit(1)
    pp.pprint(client.objGetIsBinary(args[0], args[1],))

elif cmd == 'objGetMemberDescription':
    if len(args) != 2:
        print('objGetMemberDescription requires 2 args')
        sys.exit(1)
    pp.pprint(client.objGetMemberDescription(args[0], args[1],))

elif cmd == 'objGetMemberDimensions':
    if len(args) != 2:
        print('objGetMemberDimensions requires 2 args')
        sys.exit(1)
    pp.pprint(client.objGetMemberDimensions(args[0], args[1],))

elif cmd == 'objGetMemberEnumAliases':
    if len(args) != 2:
        print('objGetMemberEnumAliases requires 2 args')
        sys.exit(1)
    pp.pprint(client.objGetMemberEnumAliases(args[0], args[1],))

elif cmd == 'objGetMemberEnumValues':
    if len(args) != 2:
        print('objGetMemberEnumValues requires 2 args')
        sys.exit(1)
    pp.pprint(client.objGetMemberEnumValues(args[0], args[1],))

elif cmd == 'objGetMemberLength':
    if len(args) != 3:
        print('objGetMemberLength requires 3 args')
        sys.exit(1)
    pp.pprint(client.objGetMemberLength(args[0], args[1], eval(args[2]),))

elif cmd == 'objGetMemberLowerBound':
    if len(args) != 2:
        print('objGetMemberLowerBound requires 2 args')
        sys.exit(1)
    pp.pprint(client.objGetMemberLowerBound(args[0], args[1],))

elif cmd == 'objGetMemberNumDimensions':
    if len(args) != 2:
        print('objGetMemberNumDimensions requires 2 args')
        sys.exit(1)
    pp.pprint(client.objGetMemberNumDimensions(args[0], args[1],))

elif cmd == 'objGetMemberProperty':
    if len(args) != 3:
        print('objGetMemberProperty requires 3 args')
        sys.exit(1)
    pp.pprint(client.objGetMemberProperty(args[0], args[1], args[2],))

elif cmd == 'objGetMemberType':
    if len(args) != 2:
        print('objGetMemberType requires 2 args')
        sys.exit(1)
    pp.pprint(client.objGetMemberType(args[0], args[1],))

elif cmd == 'objGetMemberUnits':
    if len(args) != 2:
        print('objGetMemberUnits requires 2 args')
        sys.exit(1)
    pp.pprint(client.objGetMemberUnits(args[0], args[1],))

elif cmd == 'objGetMemberUpperBound':
    if len(args) != 2:
        print('objGetMemberUpperBound requires 2 args')
        sys.exit(1)
    pp.pprint(client.objGetMemberUpperBound(args[0], args[1],))

elif cmd == 'objGetMemberValueAsString':
    if len(args) != 2:
        print('objGetMemberValueAsString requires 2 args')
        sys.exit(1)
    pp.pprint(client.objGetMemberValueAsString(args[0], args[1],))

elif cmd == 'objGetStringArrayMemberValue':
    if len(args) != 3:
        print('objGetStringArrayMemberValue requires 3 args')
        sys.exit(1)
    pp.pprint(client.objGetStringArrayMemberValue(args[0], args[1], args[2],))

elif cmd == 'objGetStringMemberValue':
    if len(args) != 2:
        print('objGetStringMemberValue requires 2 args')
        sys.exit(1)
    pp.pprint(client.objGetStringMemberValue(args[0], args[1],))

elif cmd == 'objHasMember':
    if len(args) != 2:
        print('objHasMember requires 2 args')
        sys.exit(1)
    pp.pprint(client.objHasMember(args[0], args[1],))

elif cmd == 'objHasMemberLowerBound':
    if len(args) != 2:
        print('objHasMemberLowerBound requires 2 args')
        sys.exit(1)
    pp.pprint(client.objHasMemberLowerBound(args[0], args[1],))

elif cmd == 'objHasMemberUpperBound':
    if len(args) != 2:
        print('objHasMemberUpperBound requires 2 args')
        sys.exit(1)
    pp.pprint(client.objHasMemberUpperBound(args[0], args[1],))

elif cmd == 'objIsNonStrictType':
    if len(args) != 1:
        print('objIsNonStrictType requires 1 args')
        sys.exit(1)
    pp.pprint(client.objIsNonStrictType(args[0],))

elif cmd == 'objSetBaseName':
    if len(args) != 3:
        print('objSetBaseName requires 3 args')
        sys.exit(1)
    pp.pprint(client.objSetBaseName(args[0], args[1], args[2],))

elif cmd == 'objSetBooleanArrayMemberValue':
    if len(args) != 4:
        print('objSetBooleanArrayMemberValue requires 4 args')
        sys.exit(1)
    pp.pprint(client.objSetBooleanArrayMemberValue(args[0], args[1], args[2], eval(args[3]),))

elif cmd == 'objSetBooleanMemberValue':
    if len(args) != 3:
        print('objSetBooleanMemberValue requires 3 args')
        sys.exit(1)
    pp.pprint(client.objSetBooleanMemberValue(args[0], args[1], eval(args[2]),))

elif cmd == 'objSetDoubleArrayMemberValue':
    if len(args) != 4:
        print('objSetDoubleArrayMemberValue requires 4 args')
        sys.exit(1)
    pp.pprint(client.objSetDoubleArrayMemberValue(args[0], args[1], args[2], eval(args[3]),))

elif cmd == 'objSetDoubleMemberValue':
    if len(args) != 3:
        print('objSetDoubleMemberValue requires 3 args')
        sys.exit(1)
    pp.pprint(client.objSetDoubleMemberValue(args[0], args[1], eval(args[2]),))

elif cmd == 'objSetFileExtension':
    if len(args) != 3:
        print('objSetFileExtension requires 3 args')
        sys.exit(1)
    pp.pprint(client.objSetFileExtension(args[0], args[1], args[2],))

elif cmd == 'objSetFileName':
    if len(args) != 3:
        print('objSetFileName requires 3 args')
        sys.exit(1)
    pp.pprint(client.objSetFileName(args[0], args[1], args[2],))

elif cmd == 'objSetIntArrayMemberValue':
    if len(args) != 4:
        print('objSetIntArrayMemberValue requires 4 args')
        sys.exit(1)
    pp.pprint(client.objSetIntArrayMemberValue(args[0], args[1], args[2], eval(args[3]),))

elif cmd == 'objSetIntMemberValue':
    if len(args) != 3:
        print('objSetIntMemberValue requires 3 args')
        sys.exit(1)
    pp.pprint(client.objSetIntMemberValue(args[0], args[1], eval(args[2]),))

elif cmd == 'objSetIsBinary':
    if len(args) != 3:
        print('objSetIsBinary requires 3 args')
        sys.exit(1)
    pp.pprint(client.objSetIsBinary(args[0], args[1], eval(args[2]),))

elif cmd == 'objSetMember':
    if len(args) != 4:
        print('objSetMember requires 4 args')
        sys.exit(1)
    pp.pprint(client.objSetMember(args[0], args[1], args[2], args[3],))

elif cmd == 'objSetMemberDescription':
    if len(args) != 3:
        print('objSetMemberDescription requires 3 args')
        sys.exit(1)
    pp.pprint(client.objSetMemberDescription(args[0], args[1], args[2],))

elif cmd == 'objSetMemberDimensions':
    if len(args) != 3:
        print('objSetMemberDimensions requires 3 args')
        sys.exit(1)
    pp.pprint(client.objSetMemberDimensions(args[0], args[1], args[2],))

elif cmd == 'objSetMemberEnumAliases':
    if len(args) != 3:
        print('objSetMemberEnumAliases requires 3 args')
        sys.exit(1)
    pp.pprint(client.objSetMemberEnumAliases(args[0], args[1], args[2],))

elif cmd == 'objSetMemberEnumValues':
    if len(args) != 3:
        print('objSetMemberEnumValues requires 3 args')
        sys.exit(1)
    pp.pprint(client.objSetMemberEnumValues(args[0], args[1], args[2],))

elif cmd == 'objSetMemberLength':
    if len(args) != 4:
        print('objSetMemberLength requires 4 args')
        sys.exit(1)
    pp.pprint(client.objSetMemberLength(args[0], args[1], eval(args[2]), eval(args[3]),))

elif cmd == 'objSetMemberLowerBound':
    if len(args) != 3:
        print('objSetMemberLowerBound requires 3 args')
        sys.exit(1)
    pp.pprint(client.objSetMemberLowerBound(args[0], args[1], args[2],))

elif cmd == 'objSetMemberProperty':
    if len(args) != 4:
        print('objSetMemberProperty requires 4 args')
        sys.exit(1)
    pp.pprint(client.objSetMemberProperty(args[0], args[1], args[2], args[3],))

elif cmd == 'objSetMemberUnits':
    if len(args) != 3:
        print('objSetMemberUnits requires 3 args')
        sys.exit(1)
    pp.pprint(client.objSetMemberUnits(args[0], args[1], args[2],))

elif cmd == 'objSetMemberUpperBound':
    if len(args) != 3:
        print('objSetMemberUpperBound requires 3 args')
        sys.exit(1)
    pp.pprint(client.objSetMemberUpperBound(args[0], args[1], args[2],))

elif cmd == 'objSetMemberValueFromString':
    if len(args) != 3:
        print('objSetMemberValueFromString requires 3 args')
        sys.exit(1)
    pp.pprint(client.objSetMemberValueFromString(args[0], args[1], args[2],))

elif cmd == 'objSetStringArrayMemberValue':
    if len(args) != 4:
        print('objSetStringArrayMemberValue requires 4 args')
        sys.exit(1)
    pp.pprint(client.objSetStringArrayMemberValue(args[0], args[1], args[2], args[3],))

elif cmd == 'objSetStringMemberValue':
    if len(args) != 3:
        print('objSetStringMemberValue requires 3 args')
        sys.exit(1)
    pp.pprint(client.objSetStringMemberValue(args[0], args[1], args[2],))

elif cmd == 'objToFile':
    if len(args) != 3:
        print('objToFile requires 3 args')
        sys.exit(1)
    pp.pprint(client.objToFile(args[0], args[1], args[2],))

elif cmd == 'objToString':
    if len(args) != 1:
        print('objToString requires 1 args')
        sys.exit(1)
    pp.pprint(client.objToString(args[0],))

elif cmd == 'objToXML':
    if len(args) != 1:
        print('objToXML requires 1 args')
        sys.exit(1)
    pp.pprint(client.objToXML(args[0],))

elif cmd == 'wrapperAddMethod':
    if len(args) != 3:
        print('wrapperAddMethod requires 3 args')
        sys.exit(1)
    pp.pprint(client.wrapperAddMethod(args[0], args[1], eval(args[2]),))

elif cmd == 'wrapperAddVariable':
    if len(args) != 3:
        print('wrapperAddVariable requires 3 args')
        sys.exit(1)
    pp.pprint(client.wrapperAddVariable(args[0], args[1], eval(args[2]),))

elif cmd == 'wrapperGetDictKey':
    if len(args) != 1:
        print('wrapperGetDictKey requires 1 args')
        sys.exit(1)
    pp.pprint(client.wrapperGetDictKey(eval(args[0]),))

elif cmd == 'wrapperGetDictNumEntries':
    if len(args) != 0:
        print('wrapperGetDictNumEntries requires 0 args')
        sys.exit(1)
    pp.pprint(client.wrapperGetDictNumEntries())

elif cmd == 'wrapperGetDictValue':
    if len(args) != 1:
        print('wrapperGetDictValue requires 1 args')
        sys.exit(1)
    pp.pprint(client.wrapperGetDictValue(eval(args[0]),))

elif cmd == 'wrapperGetDirectory':
    if len(args) != 0:
        print('wrapperGetDirectory requires 0 args')
        sys.exit(1)
    pp.pprint(client.wrapperGetDirectory())

elif cmd == 'wrapperGetRunDirectory':
    if len(args) != 0:
        print('wrapperGetRunDirectory requires 0 args')
        sys.exit(1)
    pp.pprint(client.wrapperGetRunDirectory())

elif cmd == 'wrapperGetVarType':
    if len(args) != 1:
        print('wrapperGetVarType requires 1 args')
        sys.exit(1)
    pp.pprint(client.wrapperGetVarType(args[0],))

elif cmd == 'wrapperRemoveVariable':
    if len(args) != 1:
        print('wrapperRemoveVariable requires 1 args')
        sys.exit(1)
    pp.pprint(client.wrapperRemoveVariable(args[0],))

elif cmd == 'wrapperSleep':
    if len(args) != 1:
        print('wrapperSleep requires 1 args')
        sys.exit(1)
    pp.pprint(client.wrapperSleep(eval(args[0]),))

elif cmd == 'arrayFromString':
    if len(args) != 2:
        print('arrayFromString requires 2 args')
        sys.exit(1)
    pp.pprint(client.arrayFromString(args[0], args[1],))

elif cmd == 'arrayGetDimensions':
    if len(args) != 1:
        print('arrayGetDimensions requires 1 args')
        sys.exit(1)
    pp.pprint(client.arrayGetDimensions(args[0],))

elif cmd == 'arrayGetLength':
    if len(args) != 2:
        print('arrayGetLength requires 2 args')
        sys.exit(1)
    pp.pprint(client.arrayGetLength(args[0], eval(args[1]),))

elif cmd == 'arrayGetLockResize':
    if len(args) != 1:
        print('arrayGetLockResize requires 1 args')
        sys.exit(1)
    pp.pprint(client.arrayGetLockResize(args[0],))

elif cmd == 'arrayGetNumDimensions':
    if len(args) != 1:
        print('arrayGetNumDimensions requires 1 args')
        sys.exit(1)
    pp.pprint(client.arrayGetNumDimensions(args[0],))

elif cmd == 'arrayLockDimensions':
    if len(args) != 1:
        print('arrayLockDimensions requires 1 args')
        sys.exit(1)
    pp.pprint(client.arrayLockDimensions(args[0],))

elif cmd == 'arraySetDimensions':
    if len(args) != 2:
        print('arraySetDimensions requires 2 args')
        sys.exit(1)
    pp.pprint(client.arraySetDimensions(args[0], args[1],))

elif cmd == 'arraySetLength':
    if len(args) != 3:
        print('arraySetLength requires 3 args')
        sys.exit(1)
    pp.pprint(client.arraySetLength(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'arraySetLockResize':
    if len(args) != 2:
        print('arraySetLockResize requires 2 args')
        sys.exit(1)
    pp.pprint(client.arraySetLockResize(args[0], eval(args[1]),))

elif cmd == 'arrayToString':
    if len(args) != 1:
        print('arrayToString requires 1 args')
        sys.exit(1)
    pp.pprint(client.arrayToString(args[0],))

elif cmd == 'simpleGetDescription':
    if len(args) != 1:
        print('simpleGetDescription requires 1 args')
        sys.exit(1)
    pp.pprint(client.simpleGetDescription(args[0],))

elif cmd == 'simpleGetHasChanged':
    if len(args) != 1:
        print('simpleGetHasChanged requires 1 args')
        sys.exit(1)
    pp.pprint(client.simpleGetHasChanged(args[0],))

elif cmd == 'simpleGetUnits':
    if len(args) != 1:
        print('simpleGetUnits requires 1 args')
        sys.exit(1)
    pp.pprint(client.simpleGetUnits(args[0],))

elif cmd == 'simpleSetDescription':
    if len(args) != 2:
        print('simpleSetDescription requires 2 args')
        sys.exit(1)
    pp.pprint(client.simpleSetDescription(args[0], args[1],))

elif cmd == 'simpleSetHasChanged':
    if len(args) != 2:
        print('simpleSetHasChanged requires 2 args')
        sys.exit(1)
    pp.pprint(client.simpleSetHasChanged(args[0], eval(args[1]),))

elif cmd == 'simpleSetUnits':
    if len(args) != 2:
        print('simpleSetUnits requires 2 args')
        sys.exit(1)
    pp.pprint(client.simpleSetUnits(args[0], args[1],))

elif cmd == 'strGetEnumAliases':
    if len(args) != 1:
        print('strGetEnumAliases requires 1 args')
        sys.exit(1)
    pp.pprint(client.strGetEnumAliases(args[0],))

elif cmd == 'strGetEnumValues':
    if len(args) != 1:
        print('strGetEnumValues requires 1 args')
        sys.exit(1)
    pp.pprint(client.strGetEnumValues(args[0],))

elif cmd == 'strGetValue':
    if len(args) != 1:
        print('strGetValue requires 1 args')
        sys.exit(1)
    pp.pprint(client.strGetValue(args[0],))

elif cmd == 'strSetEnumAliases':
    if len(args) != 2:
        print('strSetEnumAliases requires 2 args')
        sys.exit(1)
    pp.pprint(client.strSetEnumAliases(args[0], args[1],))

elif cmd == 'strSetEnumValues':
    if len(args) != 2:
        print('strSetEnumValues requires 2 args')
        sys.exit(1)
    pp.pprint(client.strSetEnumValues(args[0], args[1],))

elif cmd == 'strSetValue':
    if len(args) != 2:
        print('strSetValue requires 2 args')
        sys.exit(1)
    pp.pprint(client.strSetValue(args[0], args[1],))

elif cmd == 'strArrayFromString':
    if len(args) != 3:
        print('strArrayFromString requires 3 args')
        sys.exit(1)
    pp.pprint(client.strArrayFromString(args[0], args[1], args[2],))

elif cmd == 'strArrayGetEnumAliases':
    if len(args) != 1:
        print('strArrayGetEnumAliases requires 1 args')
        sys.exit(1)
    pp.pprint(client.strArrayGetEnumAliases(args[0],))

elif cmd == 'strArrayGetEnumValues':
    if len(args) != 1:
        print('strArrayGetEnumValues requires 1 args')
        sys.exit(1)
    pp.pprint(client.strArrayGetEnumValues(args[0],))

elif cmd == 'strArrayGetValue':
    if len(args) != 2:
        print('strArrayGetValue requires 2 args')
        sys.exit(1)
    pp.pprint(client.strArrayGetValue(args[0], args[1],))

elif cmd == 'strArraySetEnumAliases':
    if len(args) != 2:
        print('strArraySetEnumAliases requires 2 args')
        sys.exit(1)
    pp.pprint(client.strArraySetEnumAliases(args[0], args[1],))

elif cmd == 'strArraySetEnumValues':
    if len(args) != 2:
        print('strArraySetEnumValues requires 2 args')
        sys.exit(1)
    pp.pprint(client.strArraySetEnumValues(args[0], args[1],))

elif cmd == 'strArraySetValue':
    if len(args) != 3:
        print('strArraySetValue requires 3 args')
        sys.exit(1)
    pp.pprint(client.strArraySetValue(args[0], args[1], args[2],))

elif cmd == 'strArrayToString':
    if len(args) != 2:
        print('strArrayToString requires 2 args')
        sys.exit(1)
    pp.pprint(client.strArrayToString(args[0], args[1],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
